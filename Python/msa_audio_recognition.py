# -*- coding: utf-8 -*-
"""MSA_AUDIO RECOGNITION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xg7pLOg9-ipHu0EWeMgtrmWL-MKYpu6z
"""

pip install basic-pitch

pip install mingus

#https://colab.research.google.com/gist/mscuthbert/431dee45c01598a0c11bc27823bd1c5b/music21_setup.ipynb#scrollTo=7ayYu78SYWs7

!pip install --upgrade music21

!add-apt-repository ppa:mscore-ubuntu/mscore-stable -y
!apt-get update
!apt-get install musescore

!apt-get install xvfb

# Commented out IPython magic to ensure Python compatibility.
from basic_pitch.inference import predict
from basic_pitch import ICASSP_2022_MODEL_PATH

import json
import pretty_midi
import numpy as np
# For plotting
import mir_eval.display
import librosa.display
import matplotlib.pyplot as plt
# %matplotlib inline
# For putting audio in the notebook
import IPython.display

#import mingus.extra.LilyPond as LilyPond
#import mingus.midi.midi_file_in as MidiIn

from music21 import *
us = environment.UserSettings()
us['musescoreDirectPNGPath'] = '/usr/bin/mscore'
us['directoryScratch'] = '/tmp'

# music21 is Open Source under the BSD License
# Copyright (c) 2006-22 Michael Scott Asato Cuthbert and cuthbertLab
# Support music21 by citing it in your research or produts:
#
#     Cuthbert, Michael Scott.
#     _music21: a Toolkit for Computer-Aided Music Research_
#     https://web.mit.edu/music21
#     2006-22

input_audio_path = '/content/sample-9s.mp3'
model_output, midi_data, note_events = predict(input_audio_path)

print(model_output)

print(midi_data.instruments)

print(note_events)

def plot_piano_roll(pm, start_pitch, end_pitch, fs=100):
    # Use librosa's specshow function for displaying the piano roll
    librosa.display.specshow(pm.get_piano_roll(fs)[start_pitch:end_pitch],
                             hop_length=1, sr=fs, x_axis='time', y_axis='cqt_note',
                             fmin=pretty_midi.note_number_to_hz(start_pitch))


plt.figure(figsize=(8, 4))
plot_piano_roll(midi_data, 47, 69)

IPython.display.Audio(midi_data.synthesize(fs=16000), rate=16000)

print('There are {} time signature changes'.format(len(midi_data.time_signature_changes)))
print('There are {} instruments'.format(len(midi_data.instruments)))
print('Instrument 1 has {} notes'.format(len(midi_data.instruments[0].notes)))
print('Instrument 1 has {} pitch bends'.format(len(midi_data.instruments[0].pitch_bends)))
print('Instrument 1 has {} control changes'.format(len(midi_data.instruments[0].control_changes)))

# Get and downbeat times
beats = midi_data.get_beats()
downbeats = midi_data.get_downbeats()
# Plot piano roll
plt.figure(figsize=(12, 4))
plot_piano_roll(midi_data, 24, 84)
ymin, ymax = plt.ylim()
# Plot beats as grey lines, downbeats as white lines
mir_eval.display.events(beats, base=ymin, height=ymax, color='#AAAAAA')
mir_eval.display.events(downbeats, base=ymin, height=ymax, color='#FFFFFF', lw=2)
# Only display 20 seconds for clarity
plt.xlim(0, 9);

midi_data.write('output.mid')

"""# Testing Mingus
Use for converting midi to sheet music
"""

#midi_file = open('output.mid')
#
#
#m = MidiIn.MidiFile()
#
#print(m)
#
#try:
#    m = MidiIn.MIDI_to_Composition('output.mid')
#except IOError as e:
#    print(e)
#except MidiIn.HeaderError as e:
#    print(e)
#except MidiIn.TimeDivisionError as e:
#    print(e)
#except MidiIn.FormatError as e:
#    print(e)
#except:
#    print("ERROR")
#finally:
#    print("done")
#
#print(m)

"""#Testing music21
For converting midi to sheet music
"""



midi_file = open('output.mid')

parsed = music21.converter.parse('output.mid')
parsed.write()

parsed.show('musicxml.png')

parsed.show()

parsed.show('midi')
IPython.display.Audio(midi_data.synthesize(fs=16000), rate=16000)